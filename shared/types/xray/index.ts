/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 * npx openapi-typescript https://cluster.frkn.org/openapi.json -o ./shared/types/xray/index.ts
 */

export interface paths {
  "/api/admin/token": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Admin Token */
    post: operations["admin_token"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/admin": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Current Admin */
    get: operations["get_current_admin"]
    put?: never
    /** Create Admin */
    post: operations["create_admin"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/admin/{username}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Modify Admin */
    put: operations["modify_admin"]
    post?: never
    /** Remove Admin */
    delete: operations["remove_admin"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/admins": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Admins */
    get: operations["get_admins"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/sub/{token}/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * User Subscription
     * @description Subscription link, V2ray and Clash supported
     */
    get: operations["user_subscription"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/sub/{token}/info": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** User Subscription Info */
    get: operations["user_subscription_info"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/sub/{token}/usage": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** User Get Usage */
    get: operations["user_get_usage"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/sub/{token}/{client_type}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * User Subscription With Client Type
     * @description Subscription link, v2ray, clash, sing-box, outline and clash-meta supported
     */
    get: operations["user_subscription_with_client_type"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/system": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get System Stats */
    get: operations["get_system_stats"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/inbounds": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Inbounds */
    get: operations["get_inbounds"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/hosts": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Hosts */
    get: operations["get_hosts"]
    /** Modify Hosts */
    put: operations["modify_hosts"]
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/core": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Core Stats */
    get: operations["get_core_stats"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/core/restart": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Restart Core */
    post: operations["restart_core"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/core/config": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Core Config */
    get: operations["get_core_config"]
    /** Modify Core Config */
    put: operations["modify_core_config"]
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Add User
     * @description Add a new user
     *
     *     - **username** must have 3 to 32 characters and is allowed to contain a-z, 0-9, and underscores in between
     *     - **expire** must be an UTC timestamp
     *     - **data_limit** must be in Bytes, e.g. 1073741824B = 1GB
     *     - **proxies** dictionary of protocol:settings
     *     - **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
     */
    post: operations["add_user"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user/{username}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get User
     * @description Get users information
     */
    get: operations["get_user"]
    /**
     * Modify User
     * @description Modify a user
     *
     *     - set **expire** to 0 to make the user unlimited in time, null to no change
     *     - set **data_limit** to 0 to make the user unlimited in data, null to no change
     *     - **proxies** dictionary of protocol:settings, empty means no change
     *     - **inbounds** dictionary of protocol:inbound_tags, empty means no change
     */
    put: operations["modify_user"]
    post?: never
    /**
     * Remove User
     * @description Remove a user
     */
    delete: operations["remove_user"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user/{username}/reset": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Reset User Data Usage
     * @description Reset user data usage
     */
    post: operations["reset_user_data_usage"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user/{username}/revoke_sub": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Revoke User Subscription
     * @description Revoke users subscription (Subscription link and proxies)
     */
    post: operations["revoke_user_subscription"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/users": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Users
     * @description Get all users
     */
    get: operations["get_users"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/users/reset": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Reset Users Data Usage
     * @description Reset all users data usage
     */
    post: operations["reset_users_data_usage"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user/{username}/usage": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get User Usage
     * @description Get users usage
     */
    get: operations["get_user_usage"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user/{username}/set-owner": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Set Owner */
    put: operations["set_owner"]
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/users/expired": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Expired Users
     * @description Get users who has expired
     *
     *     - **expired_before** must be an UTC datetime
     *     - **expired_after** must be an UTC datetime
     */
    get: operations["get_expired_users"]
    put?: never
    post?: never
    /**
     * Delete Expired Users
     * @description Delete users who has expired
     *
     *     - **expired_before** must be an UTC datetime
     *     - **expired_after** must be an UTC datetime
     */
    delete: operations["delete_expired_users"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user_template": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get User Templates */
    get: operations["get_user_templates"]
    put?: never
    /**
     * Add User Template
     * @description Add a new user template
     *
     *     - **name** can be up to 64 characters
     *     - **data_limit** must be in bytes and larger or equal to 0
     *     - **expire_duration** must be in seconds and larger or equat to 0
     *     - **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
     */
    post: operations["add_user_template"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/user_template/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get User Template
     * @description Get User Template information with id
     */
    get: operations["get_user_template"]
    /**
     * Modify User Template
     * @description Modify User Template
     *
     *     - **name** can be up to 64 characters
     *     - **data_limit** must be in bytes and larger or equal to 0
     *     - **expire_duration** must be in seconds and larger or equat to 0
     *     - **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
     */
    put: operations["modify_user_template"]
    post?: never
    /** Remove User Template */
    delete: operations["remove_user_template"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/node/settings": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Node Settings */
    get: operations["get_node_settings"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/node": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Add Node */
    post: operations["add_node"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/node/{node_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Node */
    get: operations["get_node"]
    /** Modify Node */
    put: operations["modify_node"]
    post?: never
    /** Remove Node */
    delete: operations["remove_node"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/nodes": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Nodes */
    get: operations["get_nodes"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/node/{node_id}/reconnect": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Reconnect Node */
    post: operations["reconnect_node"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/nodes/usage": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Usage
     * @description Get nodes usage
     */
    get: operations["get_usage"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Base */
    get: operations["base"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** Admin */
    Admin: {
      /** Username */
      username: string
      /** Is Sudo */
      is_sudo: boolean
    }
    /** AdminCreate */
    AdminCreate: {
      /** Username */
      username: string
      /** Is Sudo */
      is_sudo: boolean
      /** Password */
      password: string
    }
    /** AdminModify */
    AdminModify: {
      /** Password */
      password: string
      /** Is Sudo */
      is_sudo: boolean
    }
    /** Body_admin_token_api_admin_token_post */
    Body_admin_token_api_admin_token_post: {
      /** Grant Type */
      grant_type?: string
      /** Username */
      username: string
      /** Password */
      password: string
      /**
       * Scope
       * @default
       */
      scope: string
      /** Client Id */
      client_id?: string
      /** Client Secret */
      client_secret?: string
    }
    /** CoreStats */
    CoreStats: {
      /** Version */
      version: string
      /** Started */
      started: boolean
      /** Logs Websocket */
      logs_websocket: string
    }
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][]
    }
    /**
     * NodeCreate
     * @example {
     *       "name": "DE node",
     *       "address": "192.168.1.1",
     *       "port": 62050,
     *       "api_port": 62051,
     *       "add_as_new_host": true,
     *       "usage_coefficient": 1
     *     }
     */
    NodeCreate: {
      /** Name */
      name: string
      /** Address */
      address: string
      /**
       * Port
       * @default 62050
       */
      port: number
      /**
       * Api Port
       * @default 62051
       */
      api_port: number
      /**
       * Usage Coefficient
       * @default 1
       */
      usage_coefficient: number
      /**
       * Add As New Host
       * @default true
       */
      add_as_new_host: boolean
    }
    /**
     * NodeModify
     * @example {
     *       "name": "DE node",
     *       "address": "192.168.1.1",
     *       "port": 62050,
     *       "api_port": 62051,
     *       "status": "disabled",
     *       "usage_coefficient": 1
     *     }
     */
    NodeModify: {
      /** Name */
      name?: string | null
      /** Address */
      address?: string | null
      /** Port */
      port?: number | null
      /** Api Port */
      api_port?: number | null
      /** Usage Coefficient */
      usage_coefficient?: number | null
      status?: components["schemas"]["NodeStatus"] | null
    }
    /** NodeResponse */
    NodeResponse: {
      /** Name */
      name: string
      /** Address */
      address: string
      /**
       * Port
       * @default 62050
       */
      port: number
      /**
       * Api Port
       * @default 62051
       */
      api_port: number
      /**
       * Usage Coefficient
       * @default 1
       */
      usage_coefficient: number
      /** Id */
      id: number
      /** Xray Version */
      xray_version?: string
      status: components["schemas"]["NodeStatus"]
      /** Message */
      message?: string
    }
    /** NodeSettings */
    NodeSettings: {
      /**
       * Min Node Version
       * @default v0.2.0
       */
      min_node_version: string
      /** Certificate */
      certificate: string
    }
    /**
     * NodeStatus
     * @description An enumeration.
     * @enum {string}
     */
    NodeStatus: "connected" | "connecting" | "error" | "disabled"
    /** NodeUsageResponse */
    NodeUsageResponse: {
      /** Node Id */
      node_id?: number
      /** Node Name */
      node_name: string
      /** Uplink */
      uplink: number
      /** Downlink */
      downlink: number
    }
    /** NodesUsageResponse */
    NodesUsageResponse: {
      /** Usages */
      usages: components["schemas"]["NodeUsageResponse"][]
    }
    /** ProxyHost */
    ProxyHost: {
      /** Remark */
      remark: string
      /** Address */
      address: string
      /** Port */
      port?: number | null
      /** Sni */
      sni?: string | null
      /** Host */
      host?: string | null
      /** Path */
      path?: string | null
      /** @default inbound_default */
      security: components["schemas"]["ProxyHostSecurity"]
      /** @default  */
      alpn: components["schemas"]["ProxyHostALPN"]
      /** @default  */
      fingerprint: components["schemas"]["ProxyHostFingerprint"]
      /** Allowinsecure */
      allowinsecure?: boolean
      /** Is Disabled */
      is_disabled?: boolean
    }
    /**
     * ProxyHostALPN
     * @description An enumeration.
     * @enum {unknown}
     */
    ProxyHostALPN: "" | "h2" | "http/1.1" | "h2,http/1.1"
    /**
     * ProxyHostFingerprint
     * @description An enumeration.
     * @enum {unknown}
     */
    ProxyHostFingerprint:
      | ""
      | "chrome"
      | "firefox"
      | "safari"
      | "ios"
      | "android"
      | "edge"
      | "360"
      | "qq"
      | "random"
      | "randomized"
    /**
     * ProxyHostSecurity
     * @description An enumeration.
     * @enum {string}
     */
    ProxyHostSecurity: "inbound_default" | "none" | "tls"
    /** ProxyInbound */
    ProxyInbound: {
      /** Tag */
      tag: string
      protocol: components["schemas"]["ProxyTypes"]
      /** Network */
      network: string
      /** Tls */
      tls: string
      /** Port */
      port: number | string
    }
    /** ProxySettings */
    ProxySettings: Record<string, never>
    /**
     * ProxyTypes
     * @description An enumeration.
     * @enum {string}
     */
    ProxyTypes: "vmess" | "vless" | "trojan" | "shadowsocks"
    /** SystemStats */
    SystemStats: {
      /** Version */
      version: string
      /** Mem Total */
      mem_total: number
      /** Mem Used */
      mem_used: number
      /** Cpu Cores */
      cpu_cores: number
      /** Cpu Usage */
      cpu_usage: number
      /** Total User */
      total_user: number
      /** Users Active */
      users_active: number
      /** Incoming Bandwidth */
      incoming_bandwidth: number
      /** Outgoing Bandwidth */
      outgoing_bandwidth: number
      /** Incoming Bandwidth Speed */
      incoming_bandwidth_speed: number
      /** Outgoing Bandwidth Speed */
      outgoing_bandwidth_speed: number
    }
    /** Token */
    Token: {
      /** Access Token */
      access_token: string
      /**
       * Token Type
       * @default bearer
       */
      token_type: string
    }
    /**
     * UserCreate
     * @example {
     *       "username": "user1234",
     *       "proxies": {
     *         "vmess": {
     *           "id": "35e4e39c-7d5c-4f4b-8b71-558e4f37ff53"
     *         },
     *         "vless": {}
     *       },
     *       "inbounds": {
     *         "vmess": [
     *           "VMess TCP",
     *           "VMess Websocket"
     *         ],
     *         "vless": [
     *           "VLESS TCP REALITY",
     *           "VLESS GRPC REALITY"
     *         ]
     *       },
     *       "expire": 0,
     *       "data_limit": 0,
     *       "data_limit_reset_strategy": "no_reset",
     *       "status": "active",
     *       "note": "",
     *       "on_hold_timeout": "2023-11-03T20:30:00",
     *       "on_hold_expire_duration": 0
     *     }
     */
    UserCreate: {
      /**
       * Proxies
       * @default {}
       */
      proxies: {
        [key: string]: components["schemas"]["ProxySettings"]
      }
      /** Expire */
      expire?: number | null
      /**
       * Data Limit
       * @description data_limit can be 0 or greater
       */
      data_limit?: number
      /** @default no_reset */
      data_limit_reset_strategy: components["schemas"]["UserDataLimitResetStrategy"]
      /**
       * Inbounds
       * @default {}
       */
      inbounds: {
        [key: string]: string[]
      }
      /** Note */
      note?: string | null
      /**
       * Sub Updated At
       * Format: date-time
       */
      sub_updated_at?: string | null
      /** Sub Last User Agent */
      sub_last_user_agent?: string | null
      /**
       * Online At
       * Format: date-time
       */
      online_at?: string | null
      /** On Hold Expire Duration */
      on_hold_expire_duration?: number | null
      /**
       * On Hold Timeout
       * Format: date-time
       */
      on_hold_timeout?: string | null
      /** Username */
      username: string
      status?: components["schemas"]["UserStatusCreate"]
    }
    /**
     * UserDataLimitResetStrategy
     * @description An enumeration.
     * @enum {string}
     */
    UserDataLimitResetStrategy: "no_reset" | "day" | "week" | "month" | "year"
    /**
     * UserModify
     * @example {
     *       "proxies": {
     *         "vmess": {
     *           "id": "35e4e39c-7d5c-4f4b-8b71-558e4f37ff53"
     *         },
     *         "vless": {}
     *       },
     *       "inbounds": {
     *         "vmess": [
     *           "VMess TCP",
     *           "VMess Websocket"
     *         ],
     *         "vless": [
     *           "VLESS TCP REALITY",
     *           "VLESS GRPC REALITY"
     *         ]
     *       },
     *       "expire": 0,
     *       "data_limit": 0,
     *       "data_limit_reset_strategy": "no_reset",
     *       "status": "active",
     *       "note": "",
     *       "on_hold_timeout": "2023-11-03T20:30:00",
     *       "on_hold_expire_duration": 0
     *     }
     */
    UserModify: {
      /**
       * Proxies
       * @default {}
       */
      proxies: {
        [key: string]: components["schemas"]["ProxySettings"]
      }
      /** Expire */
      expire?: number | null
      /**
       * Data Limit
       * @description data_limit can be 0 or greater
       */
      data_limit?: number
      data_limit_reset_strategy?: components["schemas"]["UserDataLimitResetStrategy"]
      /**
       * Inbounds
       * @default {}
       */
      inbounds: {
        [key: string]: string[]
      }
      /** Note */
      note?: string | null
      /**
       * Sub Updated At
       * Format: date-time
       */
      sub_updated_at?: string | null
      /** Sub Last User Agent */
      sub_last_user_agent?: string | null
      /**
       * Online At
       * Format: date-time
       */
      online_at?: string | null
      /** On Hold Expire Duration */
      on_hold_expire_duration?: number | null
      /**
       * On Hold Timeout
       * Format: date-time
       */
      on_hold_timeout?: string | null
      status?: components["schemas"]["UserStatusModify"]
    }
    /** UserResponse */
    UserResponse: {
      /** Proxies */
      proxies: Record<string, never>
      /** Expire */
      expire?: number | null
      /**
       * Data Limit
       * @description data_limit can be 0 or greater
       */
      data_limit?: number
      /** @default no_reset */
      data_limit_reset_strategy: components["schemas"]["UserDataLimitResetStrategy"]
      /**
       * Inbounds
       * @default {}
       */
      inbounds: {
        [key: string]: string[]
      }
      /** Note */
      note?: string | null
      /**
       * Sub Updated At
       * Format: date-time
       */
      sub_updated_at?: string | null
      /** Sub Last User Agent */
      sub_last_user_agent?: string | null
      /**
       * Online At
       * Format: date-time
       */
      online_at?: string | null
      /** On Hold Expire Duration */
      on_hold_expire_duration?: number | null
      /**
       * On Hold Timeout
       * Format: date-time
       */
      on_hold_timeout?: string | null
      /** Username */
      username: string
      status: components["schemas"]["UserStatus"]
      /** Used Traffic */
      used_traffic: number
      /**
       * Lifetime Used Traffic
       * @default 0
       */
      lifetime_used_traffic: number
      /**
       * Created At
       * Format: date-time
       */
      created_at: string
      /**
       * Links
       * @default []
       */
      links: string[]
      /**
       * Subscription Url
       * @default
       */
      subscription_url: string
      /**
       * Excluded Inbounds
       * @default {}
       */
      excluded_inbounds: {
        [key: string]: string[]
      }
    }
    /**
     * UserStatus
     * @description An enumeration.
     * @enum {string}
     */
    UserStatus: "active" | "disabled" | "limited" | "expired" | "on_hold"
    /**
     * UserStatusCreate
     * @description An enumeration.
     * @enum {string}
     */
    UserStatusCreate: "active" | "on_hold"
    /**
     * UserStatusModify
     * @description An enumeration.
     * @enum {string}
     */
    UserStatusModify: "active" | "disabled" | "on_hold"
    /**
     * UserTemplateCreate
     * @example {
     *       "name": "my template 1",
     *       "inbounds": {
     *         "vmess": [
     *           "VMESS_INBOUND"
     *         ],
     *         "vless": [
     *           "VLESS_INBOUND"
     *         ]
     *       },
     *       "data_limit": 0,
     *       "expire_duration": 0
     *     }
     */
    UserTemplateCreate: {
      /** Name */
      name?: string | null
      /**
       * Data Limit
       * @description data_limit can be 0 or greater
       */
      data_limit?: number
      /**
       * Expire Duration
       * @description expire_duration can be 0 or greater in seconds
       */
      expire_duration?: number
      /** Username Prefix */
      username_prefix?: string
      /** Username Suffix */
      username_suffix?: string
      /**
       * Inbounds
       * @default {}
       */
      inbounds: {
        [key: string]: string[]
      }
    }
    /**
     * UserTemplateModify
     * @example {
     *       "name": "my template 1",
     *       "inbounds": {
     *         "vmess": [
     *           "VMESS_INBOUND"
     *         ],
     *         "vless": [
     *           "VLESS_INBOUND"
     *         ]
     *       },
     *       "data_limit": 0,
     *       "expire_duration": 0
     *     }
     */
    UserTemplateModify: {
      /** Name */
      name?: string | null
      /**
       * Data Limit
       * @description data_limit can be 0 or greater
       */
      data_limit?: number
      /**
       * Expire Duration
       * @description expire_duration can be 0 or greater in seconds
       */
      expire_duration?: number
      /** Username Prefix */
      username_prefix?: string
      /** Username Suffix */
      username_suffix?: string
      /**
       * Inbounds
       * @default {}
       */
      inbounds: {
        [key: string]: string[]
      }
    }
    /** UserTemplateResponse */
    UserTemplateResponse: {
      /** Name */
      name?: string | null
      /**
       * Data Limit
       * @description data_limit can be 0 or greater
       */
      data_limit?: number
      /**
       * Expire Duration
       * @description expire_duration can be 0 or greater in seconds
       */
      expire_duration?: number
      /** Username Prefix */
      username_prefix?: string
      /** Username Suffix */
      username_suffix?: string
      /**
       * Inbounds
       * @default {}
       */
      inbounds: {
        [key: string]: string[]
      }
      /** Id */
      id: number
    }
    /** UserUsageResponse */
    UserUsageResponse: {
      /** Node Id */
      node_id?: number
      /** Node Name */
      node_name: string
      /** Used Traffic */
      used_traffic: number
    }
    /** UserUsagesResponse */
    UserUsagesResponse: {
      /** Username */
      username: string
      /** Usages */
      usages: components["schemas"]["UserUsageResponse"][]
    }
    /** UsersResponse */
    UsersResponse: {
      /** Users */
      users: components["schemas"]["UserResponse"][]
      /** Total */
      total: number
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  admin_token: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_admin_token_api_admin_token_post"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Token"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_current_admin: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Admin"]
        }
      }
    }
  }
  create_admin: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdminCreate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Admin"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Admin already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  modify_admin: {
    parameters: {
      query?: never
      header?: never
      path: {
        username: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdminModify"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Admin"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Admin not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  remove_admin: {
    parameters: {
      query?: never
      header?: never
      path: {
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Admin not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_admins: {
    parameters: {
      query?: {
        offset?: number
        limit?: number
        username?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Admin"][]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  user_subscription: {
    parameters: {
      query?: never
      header?: {
        "user-agent"?: string
      }
      path: {
        token: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  user_subscription_info: {
    parameters: {
      query?: never
      header?: never
      path: {
        token: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserResponse"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  user_get_usage: {
    parameters: {
      query?: {
        start?: string
        end?: string
      }
      header?: never
      path: {
        token: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  user_subscription_with_client_type: {
    parameters: {
      query?: never
      header?: never
      path: {
        token: string
        client_type: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description Invalid subscription type */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_system_stats: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["SystemStats"]
        }
      }
    }
  }
  get_inbounds: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            [key: string]: components["schemas"]["ProxyInbound"][]
          }
        }
      }
    }
  }
  get_hosts: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            [key: string]: components["schemas"]["ProxyHost"][]
          }
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  modify_hosts: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": {
          [key: string]: components["schemas"]["ProxyHost"][]
        }
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            [key: string]: components["schemas"]["ProxyHost"][]
          }
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_core_stats: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CoreStats"]
        }
      }
    }
  }
  restart_core: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_core_config: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": Record<string, never>
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  modify_core_config: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": Record<string, never>
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": Record<string, never>
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  add_user: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserResponse"]
        }
      }
      /** @description User already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_user: {
    parameters: {
      query?: never
      header?: never
      path: {
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserResponse"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  modify_user: {
    parameters: {
      query?: never
      header?: never
      path: {
        username: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserModify"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserResponse"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  remove_user: {
    parameters: {
      query?: never
      header?: never
      path: {
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  reset_user_data_usage: {
    parameters: {
      query?: never
      header?: never
      path: {
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserResponse"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  revoke_user_subscription: {
    parameters: {
      query?: never
      header?: never
      path: {
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserResponse"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_users: {
    parameters: {
      query?: {
        offset?: number
        limit?: number
        username?: string[]
        status?: components["schemas"]["UserStatus"]
        sort?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UsersResponse"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  reset_users_data_usage: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_user_usage: {
    parameters: {
      query?: {
        start?: string
        end?: string
      }
      header?: never
      path: {
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserUsagesResponse"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  set_owner: {
    parameters: {
      query: {
        admin_username: string
      }
      header?: never
      path: {
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserResponse"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_expired_users: {
    parameters: {
      query?: {
        expired_before?: string
        expired_after?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": string[]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  delete_expired_users: {
    parameters: {
      query?: {
        expired_before?: string
        expired_after?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": string[]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_user_templates: {
    parameters: {
      query?: {
        offset?: number
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserTemplateResponse"][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  add_user_template: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserTemplateCreate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserTemplateResponse"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Template by this name already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_user_template: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserTemplateResponse"]
        }
      }
      /** @description User Template not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  modify_user_template: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserTemplateModify"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserTemplateResponse"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User Template not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Template by this name already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  remove_user_template: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description User Template not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_node_settings: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NodeSettings"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  add_node: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["NodeCreate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NodeResponse"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_node: {
    parameters: {
      query?: never
      header?: never
      path: {
        node_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NodeResponse"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Node not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  modify_node: {
    parameters: {
      query?: never
      header?: never
      path: {
        node_id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["NodeModify"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NodeResponse"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Node not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  remove_node: {
    parameters: {
      query?: never
      header?: never
      path: {
        node_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Node not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_nodes: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NodeResponse"][]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  reconnect_node: {
    parameters: {
      query?: never
      header?: never
      path: {
        node_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Node not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_usage: {
    parameters: {
      query?: {
        start?: string
        end?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["NodesUsageResponse"]
        }
      }
      /** @description You're not allowed */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  base: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "text/html": string
        }
      }
    }
  }
}
