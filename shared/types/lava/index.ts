/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 * npx openapi-typescript https://gate.lava.top/docs/documentation.yaml -o ./shared/types/lava/index.ts
 */

export interface paths {
  "/api/v1/webhooks": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить вебхуки партнёра */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Вебхуки успешно получены */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": unknown
          }
        }
        /** @description Пользователь неавторизован */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Пользователь не является партнёром */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
      }
    }
    put?: never
    /**
     * Создание вебхука
     * @description Создаёт вебхук для одного из двух ивентов (нотификаций по результатам
     *     оплаты продукта - payment_result и по результатам оплаты реккурентных платежей - recurrent_payment, т.е. подписок).
     *     'Для настройки авторизации могут использоваться схемы Basic и ApiKey.
     *     1) Basic. Необходимо передать строку с 'username password' (с пробелом между логином и паролем).
     *     2) ApiKey. Сторона партнёра должна уметь принимать его в 'X-Api-Key' header.
     *     Структура вебхука представлена в компоненте SaleWebhook
     *
     *     Важное замечание: при первичной оплате подписки результаты оплаты будут отправлены на вебхук с типом payment_result, а последующие реккурентные платежи - на recurrent_payment
     *
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          "application/json": components["schemas"]["WebhookCreateRequest"]
        }
      }
      responses: {
        /** @description Вебхук успешно создан */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["WebhookResponse"]
          }
        }
        /** @description Ошибка запроса */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
        /** @description Пользователь неавторизован */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Пользователь не является партнёром */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/webhooks/{id}": {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Идентификатор вебхука */
        id: string
      }
      cookie?: never
    }
    get?: never
    /** Обновление вебхука */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Идентификатор вебхука */
          id: string
        }
        cookie?: never
      }
      requestBody: {
        content: {
          "application/json": components["schemas"]["WebhookUpdateRequest"]
        }
      }
      responses: {
        /** @description Вебхук успешно обновлен */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["WebhookResponse"]
          }
        }
        /** @description Ошибка запроса */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
        /** @description Пользователь неавторизован */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Пользователь не является партнёром */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
        /** @description Вебхук с идентификатором не найден */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
      }
    }
    post?: never
    /** Удаление вебхука */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Идентификатор вебхука */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Вебхук успешно удалён */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Пользователь неавторизован */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Пользователь не является партнёром */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
        /** @description Вебхук с идентификатором не найден */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/webhook-history": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получение истории отправки вебхуков */
    get: {
      parameters: {
        query?: {
          /** @description номер страницы */
          page?: number
          /** @description количество возвращаемых элементов страницы */
          size?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Страница с историей отправок вебхуков */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": {
              /** @description Элементы страницы */
              items?: components["schemas"]["WebhookDeliveryResponse"][]
              /** @description Общее количество элементов */
              total?: number
              /** @description Номер текущей страницы */
              page?: number
              /** @description Максимальное количество элементов на странице */
              size?: number
            }
          }
        }
        /** @description Ошибка запроса */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
        /** @description Пользователь неавторизован */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Пользователь не является партнёром */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/feed": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Лента постов и продуктов
     * @deprecated
     */
    get: {
      parameters: {
        query?: {
          /** @description фильтрация по типу контента */
          contentCategories?: components["schemas"]["FeedItemType"]
          /** @description фильтрация по типу продукта */
          productTypes?: components["schemas"]["ProductType"]
          /** @description Номер страницы */
          page?: unknown
          /** @description Количество элементов на странице */
          size?: unknown
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description список постов и продуктов */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": {
              /** @description Элементы страницы */
              items?: {
                type?: components["schemas"]["FeedItemType"]
                data?: components["schemas"]["ProductItemDto"]
              }[]
              total?: number
              page?: number
              size?: number
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/invoice": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получение продажи партнёра */
    get: {
      parameters: {
        query?: {
          /** @description Идентификатор контракта */
          id?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Продажа партнёра */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["InvoicePaymentParamsResponse"]
          }
        }
        /** @description Пользователь неавторизован */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Продажа с таким id не найдена */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
      }
    }
    put?: never
    /**
     * Создание контракта на покупку контента. Устарел. Новый метод - /api/v2/invoice
     * @deprecated
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          "application/json": components["schemas"]["InvoiceRequestDto"]
        }
      }
      responses: {
        /** @description Возвращает описание созданного контракта */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["InvoicePaymentParamsResponse"]
          }
        }
        /** @description Продукт с таким идентификатором оффера не существует */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/invoice": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Создание контракта на покупку контента (аналогичен /api/v1/invoice) */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          "application/json": components["schemas"]["InvoiceRequestDto"]
        }
      }
      responses: {
        /** @description Возвращает описание созданного контракта */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["InvoicePaymentParamsResponse"]
          }
        }
        /** @description Продукт с таким идентификатором оффера не существует */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/sales/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получение списка продаж партнёра */
    get: {
      parameters: {
        query?: {
          /** @description номер страницы */
          page?: number
          /** @description количество возвращаемых элементов страницы */
          size?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Страница с продажами партнёра получена */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": {
              /** @description Элементы страницы */
              items?: components["schemas"]["PartnerProductDto"][]
              /** @description Общее количество элементов */
              total?: number
              /** @description Номер текущей страницы */
              page?: number
              /** @description Максимальное количество элементов на странице */
              size?: number
              /** @description Общее количество страниц */
              totalPages?: number
            }
          }
        }
        /** @description Ошибка запроса */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
        /** @description Пользователь неавторизован */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Пользователь не является партнёром */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/sales/{productId}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получение списка продаж партнёра по конкретному продукту */
    get: {
      parameters: {
        query?: {
          /** @description номер страницы */
          page?: number
          /** @description количество возвращаемых элементов страницы */
          size?: number
          /** @description Начало периода продаж (YYYY-MM-DDTHH:MM:SS+XX:XX) */
          fromDate?: string
          /** @description Конец периода продаж (YYYY-MM-DDTHH:MM:SS+XX:XX) */
          toDate?: string
          /** @description Currency ISO 4217 alphabetic code */
          currency?: components["schemas"]["CurrencyDto"]
          /** @description Статус продажи */
          status?: components["schemas"]["ContractStatusDto"]
          /** @description Строка для поиска */
          search?: string
        }
        header?: never
        path: {
          /** @description Идентификатор продукта */
          productId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Страница с продажами партнёра */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": {
              /** @description Элементы страницы */
              items?: components["schemas"]["PartnerSaleDetailsDto"][]
              /** @description Общее количество элементов */
              total?: number
              /** @description Номер текущей страницы */
              page?: number
              /** @description Максимальное количество элементов на странице */
              size?: number
              /** @description Общее количество страниц */
              totalPages?: number
            }
          }
        }
        /** @description Ошибка запроса */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
        /** @description Пользователь неавторизован */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/subscriptions": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Отмена подписки на продукт */
    delete: {
      parameters: {
        query: {
          /** @description Идентификатор контракта */
          contractId: string
          /** @description Почта пользователя, владеющего подпиской */
          email: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Подписка успешно отменена */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Ошибка отмены подписки */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
        /** @description Подписки с таким contractId не существует */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/products": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получение списка продуктов. Обновленная версия /api/v1/feed */
    get: {
      parameters: {
        query?: {
          /** @description Дата создания до которой ищутся посты и продукты */
          beforeCreatedAt?: string
          /** @description Фильтрация по типу контента */
          contentCategories?: components["schemas"]["FeedItemType"]
          /** @description Фильтрация по типу продукта */
          productTypes?: components["schemas"]["ProductType"]
          /** @description Фильтрация по видимости контента */
          feedVisibility?: components["schemas"]["FeedVisibility"]
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Список продуктов */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": {
              /** @description Список постов и продуктов */
              items?: {
                type?: components["schemas"]["FeedItemType"]
                data?:
                  | components["schemas"]["ProductItemResponse"]
                  | components["schemas"]["PostItemResponse"]
              }[]
              /**
               * @description Ссылка на следующую страницу постов и продуктов
               * @example https://gate.lava.top/api/v2/products?beforeCreatedAt=2023-11-01T05:43:18.922Z
               */
              nextPage?: string | null
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v2/products/{productId}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Обновление продукта
     * @description Для обновления офферов продукта нужно предоставить либо цену в 1 валюте (цены в остальных будут отображаться по курсу), либо в 3 валютах (поле prices)
     */
    patch: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Идентификатор продукта */
          productId: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ProductUpdateRequest"]
        }
      }
      responses: {
        /** @description Продукт успешно обновлен */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ProductItemResponse"]
          }
        }
        /** @description Продукт не найден */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["ErrorResponse"]
          }
        }
      }
    }
    trace?: never
  }
  "/api/v1/donate": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получение ссылки на донат аккаунта */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Ссылка на донат успешно получена */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["DonateResponse"]
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Тело доната */
    DonateResponse: {
      /**
       * Format: url
       * @description Ссылка на окно доната автора
       * @example https://app.lava.top/alias?donate=open
       */
      url?: string
    }
    /** @description Тело для обновления продукта */
    ProductUpdateRequest: {
      /** @description Список офферов */
      offers?: components["schemas"]["UpdateOfferRequest"][]
    }
    /** @description Тело для обновления оффера */
    UpdateOfferRequest: {
      /**
       * Format: uuid
       * @description Идентификатор оффера
       */
      id?: string
      /** @description Список цен оффера */
      prices?: components["schemas"]["UpdatePriceRequest"][]
      /** @description Название оффера */
      name?: string | null
      /** @description Описание оффера */
      description?: string | null
    }
    /** @description Тело для обновления цены оффера */
    UpdatePriceRequest: {
      /**
       * Format: double
       * @description Цена
       */
      amount?: number
      currency?: components["schemas"]["CurrencyDto"]
    }
    /** @description Продукт */
    ProductItemResponse: {
      /**
       * Format: uuid
       * @description Идентификатор продукта
       */
      id?: string
      /** @description Заголовок продукта */
      title?: string | null
      /** @description Описание продукта */
      description?: string | null
      type?: components["schemas"]["ProductType"]
      /** @description Ценники продукта */
      offers?: components["schemas"]["OfferResponse"][] | null
    }
    /** @description Пост */
    PostItemResponse: {
      /**
       * Format: uuid
       * @description Идентификатор поста
       */
      id?: string
      /** @description Заголовок поста */
      title?: string
      /** @description Описание поста */
      description?: string | null
      /** @description Тело поста */
      body?: string
      type?: components["schemas"]["PostType"]
      /**
       * Format: date-time
       * @description Время создание поста
       */
      createdAt?: string
      /**
       * Format: date-time
       * @description Время когда был обновлен пост
       */
      updatedAt?: string
      /**
       * Format: date-time
       * @description Время когда был или будет опубликован пост
       */
      publishedAt?: string
    }
    /** @description Предложения для покупки продукта */
    OfferResponse: {
      /**
       * Format: uuid
       * @description Идентификатор ценового предложения
       */
      id?: string
      /** @description Наименование цены */
      name?: string | null
      /** @description Описание предложения */
      description?: string | null
      /** @description Список цен в разных валютах */
      prices?: components["schemas"]["PriceDto"][]
      recurrent?: components["schemas"]["RecurrentDto"]
    }
    /** @description Описание покупки контента */
    InvoiceRequestDto: {
      /** @description Почта покупателя */
      email?: string
      /**
       * Format: uuid
       * @description Идентификатор цены
       */
      offerId?: string
      periodicity?: components["schemas"]["Periodicity"]
      currency?: components["schemas"]["CurrencyDto"]
      paymentMethod?: components["schemas"]["PaymentMethod"]
      buyerLanguage?: components["schemas"]["LanguageDto"] | null
    }
    /** @description Описание созданного контракта */
    InvoicePaymentParamsResponse: {
      /**
       * Format: uuid
       * @description Идентификатор контракта на покупку
       */
      id?: string
      status?: components["schemas"]["ContractStatusDto"]
      amountTotal?: components["schemas"]["AmountTotalDto"]
      /**
       * @description Ссылка на виджет оплаты продукта (пусто, если продукт бесплатный)
       * @example https://payment-widget-url
       */
      paymentUrl?: string | null
    }
    /**
     * @description Причины мешающие удалить оффер
     * @enum {string}
     */
    DeleteNotAllowedReason: "HAS_SALES" | "HAS_POSTS"
    /**
     * @deprecated
     * @description Описание повторяемости платежа. Устарел. Используйте поле periodicity в ценах оффера
     * @enum {string}
     */
    RecurrentDto: "monthly"
    /** @description Сумма */
    PriceDto: {
      /**
       * Format: double
       * @description Значение суммы
       */
      amount?: number | null
      currency?: components["schemas"]["CurrencyDto"]
      periodicity?: components["schemas"]["Periodicity"]
    }
    /** @description Ценник */
    OfferDto: {
      /**
       * Format: uuid
       * @description Идентификатор ценового предложения
       */
      id?: string
      /** @description Список цен в разных валютах */
      prices?: components["schemas"]["PriceDto"][]
      /** @description Наименование цены */
      name?: string | null
      /** @description Описание предложения */
      description?: string | null
      recurrent?: components["schemas"]["RecurrentDto"]
      /** @description Список идентификаторов постов для покупки */
      availablePosts?: string[]
      /** @description Возможность удалить */
      canBeDeleted?: boolean
      /** @description Причины не разрещающие удалить оффер */
      reasons?: components["schemas"]["DeleteNotAllowedReason"][]
    }
    /**
     * @description Статус продукта или поста
     * @enum {string}
     */
    Status: "PUBLISHED"
    /**
     * @description Тип поста
     * @enum {string}
     */
    PostType: "LESSON" | "POST"
    /**
     * @description Статус модерации
     * @enum {string}
     */
    ModerationStatus: "NEW" | "REJECTED" | "APPROVED" | "BLOCKED"
    /** @description Элемент списка продуктов */
    ProductItemDto: {
      /**
       * Format: uuid
       * @description Идентификатор продукта
       */
      id?: string
      /**
       * Format: uuid
       * @description Идентификатор юзера, создавшего продукт
       */
      accountId?: string
      /** @description Заголовок продукта */
      title?: string | null
      /** Format: date-time */
      updatedAt?: string
      status?: components["schemas"]["Status"]
      moderationStatus?: components["schemas"]["ModerationStatus"]
      type?: components["schemas"]["ProductType"]
      /** @description Ценники продукта */
      offers?: components["schemas"]["OfferDto"][]
    }
    /**
     * @description Типы итемов для ленты
     * @default PRODUCT
     * @enum {string}
     */
    FeedItemType: "POST" | "PRODUCT"
    /**
     * @description Тип продукта
     * @enum {string}
     */
    ProductType:
      | "COURSE"
      | "DIGITAL_PRODUCT"
      | "BOOK"
      | "GUIDE"
      | "SUBSCRIPTION"
      | "AUDIO"
      | "MODS"
      | "CONSULTATION"
    /** @description Информация для создания вебхука */
    WebhookCreateRequest: {
      /**
       * Format: url
       * @description URL сервиса, который будет принимать запросы
       * @example https://your-service
       */
      url?: string
      /** @description Имя */
      name?: string
      /** @description Соответствующий API ключ */
      apiKeyId?: string
      eventType?: components["schemas"]["WebhookEventTypeDto"]
      authConfig?: components["schemas"]["WebhookAuthRequest"]
    }
    /** @description Авторизационные данные для вебхука на сервисе партнёра */
    WebhookAuthRequest: {
      authType?: components["schemas"]["WebhookAuthTypeDto"]
      /** @description Ключ для авторизации. Пусто только в случае с authType == 'none' */
      authValue?: string | null
    }
    /** @description Вебхук */
    WebhookResponse: {
      /**
       * Format: uuid
       * @description Идентификатор вебхука
       */
      id?: string
      /** @description Имя вебхука */
      name?: string
      /** @description Id соответствующего API ключа */
      apiKeyId?: string
      /**
       * Format: url
       * @description URL сервиса, который будет принимать запросы
       * @example https://your-service
       */
      url?: string
      eventType?: components["schemas"]["WebhookEventTypeDto"]
      /** @description Активен ли вебхук */
      isActive?: boolean
      authType?: components["schemas"]["WebhookAuthTypeDto"]
      /**
       * Format: date-time
       * @description Дата создания вебхука
       */
      createdAt?: string
      /**
       * Format: date-time
       * @description Дата обновления вебхука
       */
      updatedAt?: string
    }
    /** @description Информация для обновления вебхука. Для сохранения текущего значения authConfig передать null */
    WebhookUpdateRequest: {
      /**
       * Format: url
       * @description URL сервиса, который будет принимать запросы
       * @example https://your-service
       */
      url?: string
      /** @description Активен ли вебхук */
      isActive?: boolean
      /** @description Имя */
      name?: string
      eventType?: components["schemas"]["WebhookEventTypeDto"]
      authConfig?: components["schemas"]["WebhookAuthRequest"]
    }
    /** @description Информация о доставке вебхука */
    WebhookDeliveryResponse: {
      /**
       * Format: uuid
       * @description Идентификатор доставки вебхука
       */
      id?: string
      /**
       * Format: uuid
       * @description Идентификатор вебхука
       */
      webhookId?: string
      /** @description Доставлен ли вебхук */
      isDelivered?: boolean
      /**
       * Format: date-time
       * @description Дата доставки вебхука
       */
      deliveredAt?: string | null
      /**
       * Format: date-time
       * @description Дата последней попытки доставки вебхука
       */
      lastDeliveryAttemptAt?: string | null
      /**
       * @description HTTP-статус последней доставки вебхука
       * @example 401
       */
      responseStatus?: number | null
      /**
       * Format: date-time
       * @description Дата создания доставки вебхука
       */
      createdAt?: string
    }
    /** @description Продажа партнёра */
    PartnerSaleDto: {
      currency?: components["schemas"]["CurrencyDto"]
      /** @description Количество проданных экземпляров */
      count?: number
      /** @description Общие продажи */
      amountTotal?: number
    }
    /** @description Продажа партнёра */
    PartnerProductDto: {
      /**
       * Format: uuid
       * @description Идентификатор продукта
       */
      productId?: string
      /** @description Название продукта */
      title?: string
      /** @description Статус продукта */
      status?: string
      sales?: unknown
    }
    /** @description Продажи в валюте */
    AmountTotalDto: {
      currency?: components["schemas"]["CurrencyDto"]
      /** @description Значение суммы */
      amount?: number
    }
    /** @description Покупатель продукта */
    BuyerDto: {
      /**
       * Format: email
       * @description Почта покупателя
       */
      email?: string
    }
    /** @description Продажи по конкретному продукту */
    PartnerSaleDetailsDto: {
      /**
       * Format: uuid
       * @description Идентификатор контракта
       */
      id?: string
      /**
       * Format: date-time
       * @description Дата создания
       */
      createdAt?: string
      status?: components["schemas"]["ContractStatusDto"]
      amountTotal?: components["schemas"]["AmountTotalDto"]
      buyer?: components["schemas"]["BuyerDto"]
    }
    /** @description Тело вебхука, отправляемого партнёру */
    SaleWebhook: {
      product?: {
        /**
         * Format: uuid
         * @description Идентификатор продукта
         */
        id?: string
        /** @description Название продукта */
        title?: string
      }
      /**
       * Format: uuid
       * @description Идентификатор контракта на покупку
       */
      contractId?: string
      /**
       * Format: uuid
       * @description Идентификатор родительского контракта на покупку (не пусто только в случае рекуррентого платежа)
       */
      parentContractId?: string | null
      buyer?: components["schemas"]["WebhookBuyer"]
      /** @description Значение суммы */
      amount?: number
      currency?: components["schemas"]["CurrencyDto"]
      status?: components["schemas"]["ContractStatusDto"]
      /**
       * Format: date-time
       * @description Дата операции
       */
      timestamp?: string
      /** @description Описание причины ошибки оплаты */
      errorMessage?: string | null
    }
    /** @description Информация о покупателе */
    WebhookBuyer: {
      /**
       * Format: email
       * @description Email покупателя
       */
      email?: string
    }
    /** @description Тело ошибки */
    ErrorResponse: {
      /**
       * @description Описание ошибки
       * @example Input fields are invalid
       */
      error?: string
      /**
       * @description Детальное описание ошибки
       * @example {
       *       "email": "should be well-formed email",
       *       "password": "should contain at least 8 symbols"
       *     }
       */
      details?: {
        [key: string]: string
      }
      /**
       * Format: date-time
       * @description Дата ошибки
       */
      timestamp?: string
    }
    /**
     * @description Тип вебхука
     * @enum {string}
     */
    WebhookEventTypeDto: "payment_result" | "recurrent_payment"
    /**
     * @description Тип авторизации для вебхука
     * @enum {string}
     */
    WebhookAuthTypeDto: "none" | "basic" | "api_key"
    /**
     * @description Валюта
     * @enum {string}
     */
    CurrencyDto: "RUB" | "USD" | "EUR"
    /**
     * @description Статус контракта
     * @enum {string}
     */
    ContractStatusDto:
      | "new"
      | "in-progress"
      | "completed"
      | "failed"
      | "cancelled"
      | "subscription-active"
      | "subscription-expired"
      | "subscription-cancelled"
      | "subscription-failed"
    /**
     * @description Язык (ISO 639-1)
     * @default EN
     * @enum {string}
     */
    LanguageDto: "EN" | "RU" | "ES"
    /**
     * @description Видимость контента
     * @default ONLY_VISIBLE
     * @enum {string}
     */
    FeedVisibility: "ALL" | "ONLY_VISIBLE" | "ONLY_HIDDEN"
    /**
     * @description Провайдер для платежа. Для платежей в российских рублях (RUB) доступен только BANK131, для платежей в Евро (EUR) или Долларах (USD) - UNLIMINT и PAYPAL. Для оплаты подписок PAYPAL недоступен. STRIPE доступен только для оплаты продуктов
     * @enum {string}
     */
    PaymentMethod: "BANK131" | "UNLIMINT" | "PAYPAL" | "STRIPE"
    /**
     * @description Периодичность оплаты
     * @enum {string}
     */
    Periodicity:
      | "ONE_TIME"
      | "MONTHLY"
      | "PERIOD_90_DAYS"
      | "PERIOD_180_DAYS"
      | "PERIOD_YEAR"
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
