/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/locations": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all locations */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description A list of locations */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["Location"][]
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/peer": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get peer information by location */
    get: {
      parameters: {
        query: {
          location: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Peer information */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["PeerResponse"]
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/stat": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get statistics of nodes */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description A list of node statistics */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": components["schemas"]["NodeStat"][]
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/user/register": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Register a new user */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          "application/json": {
            /** @example example-password */
            password?: string
          }
        }
      }
      responses: {
        /** @description User registration response */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json":
              | components["schemas"]["RegisterSuccessResponse"]
              | components["schemas"]["AuthErrorResponse"]
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/user/auth": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Authenticate a user */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          "application/json": {
            /** @example example-password */
            password?: string
          }
        }
      }
      responses: {
        /** @description Authentication response */
        200: {
          headers: {
            /** @description JWT token cookie */
            "Set-Cookie"?: string
            [name: string]: unknown
          }
          content: {
            "application/json":
              | components["schemas"]["AuthSuccessResponse"]
              | components["schemas"]["AuthErrorResponse"]
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/user/me": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get user information */
    get: {
      parameters: {
        query?: never
        header?: {
          /** @description Bearer token */
          Authorization?: string
        }
        path?: never
        cookie?: {
          /** @description Authentication token stored in cookie */
          frkn_auth?: string
        }
      }
      requestBody?: never
      responses: {
        /** @description User information and token details */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json":
              | components["schemas"]["UserMeSuccessResponse"]
              | components["schemas"]["AuthErrorResponse"]
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    Location: {
      /** @example uk */
      code: string
      /** @example ðŸ‡¬ðŸ‡§ uk */
      name: string
    }
    PeerResponse: {
      iface: {
        /** @example 10.0.0.1/24 */
        address: string
        /** @example example-key-123456 */
        key: string
        /** @example 8.8.8.8, 8.8.4.4 */
        dns: string
      }
      peer: {
        /** @example example-pubkey-abcdef */
        pubkey: string
        /** @example example-psk-123456 */
        psk: string
        /** @example 0.0.0.0/0 */
        allowed_ips: string
        /** @example 192.0.2.1:51820 */
        endpoint: string
      }
    }
    NodeStat: {
      /** @example example-node-id */
      node: string
      /** @example example-hostname */
      hostname: string
      location: {
        /** @example uk */
        code: string
        /** @example ðŸ‡¬ðŸ‡§ uk */
        name: string
      }
      /** @example wg */
      type: string
      peers: {
        /** @example 1500 */
        total: number
        /** @example 75 */
        live: number
        /** @example 1234567890 */
        tx: string
        /** @example 0987654321 */
        rx: string
      }
    }
    RegisterSuccessResponse: {
      /**
       * @example success
       * @enum {string}
       */
      status: "success"
      /**
       * Format: uuid
       * @example 70b57249-a76c-44e0-85c4-cedcb33aa664
       */
      id: string
      /**
       * Format: date-time
       * @example 2024-07-24T13:49:08.380Z
       */
      created: string
    }
    AuthSuccessResponse: {
      /**
       * @example success
       * @enum {string}
       */
      status: "success"
      /**
       * Format: uuid
       * @example 70b57249-a76c-44e0-85c4-cedcb33aa664
       */
      id: string
      /** @example example.jwt.token */
      token: string
    }
    UserMeSuccessResponse: {
      /**
       * @example success
       * @enum {string}
       */
      status: "success"
      user: {
        /** @example c4c4a9b8-4748-4a60-8d7e-9b7df8aeb0f1 */
        id: string
        /**
         * Format: date-time
         * @example 2024-07-30T14:21:00Z
         */
        created: string
      }
      token: {
        /** @example 1722302939 */
        issued?: number
        /** @example 1753860539 */
        expiration?: number
      }
    }
    AuthErrorResponse: {
      /**
       * @example error
       * @enum {string}
       */
      status: "error"
      /** @example Invalid token */
      message: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
