datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

model Users {
  id                   String               @id @default(uuid())
  password             String               @unique
  created              DateTime             @default(now())
  subscriptionType     SubscriptionType?    @map("subscription_type")
  stripeCustomerId     String?              @unique @map("stripe_customer_id")
  stripeSubscription   StripeSubscriptions?
  lavaParentContractId String?              @unique @map("lava_parent_contract_id")

  @@map("users")
}

enum SubscriptionType {
  Stripe
  Lava
}

model StripeSubscriptions {
  id                      String                    @id
  status                  StripeSubscriptionStatus
  created                 DateTime                  @default(now()) @map("created")
  updated                 DateTime?                 @map("updated")
  userId                  String                    @unique @map("user_id")
  stripeSubscriptionItems StripeSubscriptionItems[]
  user                    Users                     @relation(fields: [userId], references: [id])

  @@index([id])
  @@index([userId])
  @@map("stripe_subscriptions")
}

model LavaSubscriptions {
  contractId       String    @unique
  parentContractId String?
  status           String?
  type             String?
  timestamp        DateTime?
  errorMessage     String?
  productId        String?
  amount           Float?
  currency         String?

  @@index([parentContractId])
  @@map("lava_subscriptions")
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

enum LavaSubscriptionStatus {
  new
  in_progress
  completed
  failed
  cancelled
  subscription_active
  subscription_expired
  subscription_cancelled
  subscription_failed
}

model StripeSubscriptionItems {
  id             String              @id
  priceId        String
  created        DateTime            @default(now()) @map("created")
  updated        DateTime?           @map("updated")
  subscriptionId String
  subscription   StripeSubscriptions @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([subscriptionId])
  @@map("stripe_subscription_items")
}

model Tokens {
  id    String @id
  token String @db.Text
}
